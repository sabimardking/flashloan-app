<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flash Loan Arbitrage Pro</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Web3 Libraries for Real Blockchain Connection -->
    <script src="https://cdn.jsdelivr.net/npm/web3@1.7.0/dist/web3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@walletconnect/web3-provider@1.7.0/dist/umd/index.min.js"></script>
    <style>
        :root {
            --primary: #3498db;
            --primary-dark: #2980b9;
            --secondary: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --dark: #2c3e50;
            --darker: #1a2530;
            --light: #ecf0f1;
            --gray: #95a5a6;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, var(--darker), var(--dark));
            color: var(--light);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .description {
            color: var(--gray);
            margin-bottom: 20px;
            font-size: 1.1rem;
            line-height: 1.6;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .card-title {
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: var(--primary);
            display: flex;
            align-items: center;
        }
        
        .card-title i {
            margin-right: 10px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--light);
        }
        
        select, input {
            width: 100%;
            padding: 15px;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(0, 0, 0, 0.2);
            color: white;
            font-size: 1rem;
        }
        
        select:focus, input:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .amount-input {
            position: relative;
        }
        
        .amount-input input {
            padding-left: 50px;
        }
        
        .amount-input::before {
            content: '$';
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--primary);
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .pair-selector {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .pair-selector select {
            flex: 1;
        }
        
        .pair-arrow {
            font-size: 1.5rem;
            color: var(--primary);
        }
        
        .btn {
            background: linear-gradient(90deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 16px 25px;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(52, 152, 219, 0.4);
        }
        
        .btn-connect {
            background: linear-gradient(90deg, var(--primary), var(--primary-dark));
            width: 100%;
        }
        
        .btn-execute {
            background: linear-gradient(90deg, var(--secondary), #27ae60);
            margin-top: 10px;
            width: 100%;
        }
        
        .network-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.3);
            margin-top: 20px;
            font-size: 0.9rem;
        }
        
        .network-indicator .dot {
            width: 10px;
            height: 10px;
            background: var(--secondary);
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .disclaimer {
            background: rgba(231, 76, 60, 0.1);
            border: 1px solid rgba(231, 76, 60, 0.3);
            border-radius: 10px;
            padding: 15px;
            margin-top: 30px;
            font-size: 0.9rem;
            color: #ff7979;
        }
        
        .wallet-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .wallet-address {
            font-family: monospace;
            background: rgba(0, 0, 0, 0.3);
            padding: 8px 15px;
            border-radius: 10px;
            font-size: 0.9rem;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background: var(--darker);
            border-radius: 20px;
            padding: 30px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .modal-title {
            font-size: 1.5rem;
            color: var(--primary);
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .close-modal {
            background: none;
            border: none;
            color: var(--gray);
            font-size: 1.5rem;
            cursor: pointer;
        }
        
        .wallet-options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }
        
        .wallet-option {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .wallet-option:hover {
            transform: translateY(-5px);
            border-color: var(--primary);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.2);
        }
        
        .wallet-option i {
            font-size: 2rem;
            margin-bottom: 10px;
            color: var(--primary);
        }
        
        .profit-display {
            text-align: center;
            padding: 20px;
            background: rgba(46, 204, 113, 0.1);
            border-radius: 12px;
            margin-top: 20px;
            display: none;
        }
        
        .profit-amount {
            font-size: 2rem;
            font-weight: bold;
            color: var(--secondary);
            margin: 10px 0;
        }
        
        .dex-selection {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }
        
        .dex-option {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .dex-option.selected {
            border-color: var(--secondary);
            background: rgba(46, 204, 113, 0.1);
        }
        
        .dex-option i {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: var(--primary);
        }
        
        .qr-code {
            text-align: center;
            margin: 20px 0;
        }
        
        .qr-code img {
            max-width: 200px;
            border-radius: 12px;
        }
        
        .transaction-log {
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .transaction-log h4 {
            margin-bottom: 10px;
            color: var(--primary);
        }
        
        .log-entry {
            font-family: monospace;
            font-size: 0.9rem;
            padding: 5px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .api-status {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .api-status .indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .api-status .connected {
            background: var(--secondary);
        }
        
        .api-status .disconnected {
            background: var(--danger);
        }
        
        .contract-address {
            font-family: monospace;
            background: rgba(0, 0, 0, 0.3);
            padding: 8px 15px;
            border-radius: 10px;
            margin-top: 10px;
            font-size: 0.9rem;
            word-break: break-all;
        }
        
        @media (max-width: 968px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
            
            .dex-selection {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 768px) {
            .wallet-options, .dex-selection {
                grid-template-columns: 1fr;
            }
            
            .pair-selector {
                flex-direction: column;
            }
            
            .pair-arrow {
                transform: rotate(90deg);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-bolt"></i> Flash Loan Arbitrage Pro</h1>
            <p class="description">Multi-chain flash loan arbitrage with real blockchain connection</p>
        </header>
        
        <div class="dashboard">
            <div>
                <div class="card">
                    <h2 class="card-title"><i class="fas fa-plug"></i> Wallet Connection</h2>
                    <div class="wallet-info">
                        <div>
                            <div id="connectionStatus">Not connected</div>
                            <div class="network-indicator">
                                <span class="dot"></span>
                                <span id="networkStatus">Select a network</span>
                            </div>
                        </div>
                        <button class="btn btn-connect" id="connectWallet">
                            <i class="fas fa-wallet"></i> Connect Wallet
                        </button>
                    </div>
                    
                    <div class="form-group">
                        <label>Blockchain Network</label>
                        <select id="network">
                            <option value="eth">Ethereum</option>
                            <option value="bsc">Binance Smart Chain (BSC)</option>
                            <option value="polygon">Polygon</option>
                            <option value="solana">Solana</option>
                            <option value="base">Base</option>
                            <option value="fuse">Fuse Chain</option>
                            <option value="core">Core Blockchain</option>
                            <option value="thundercore">ThunderCore</option>
                            <option value="aptos">Aptos</option>
                            <option value="avalanche">Avalanche</option>
                            <option value="arbitrum">Arbitrum</option>
                            <option value="optimism">Optimism</option>
                        </select>
                    </div>
                    
                    <div class="api-status">
                        <span class="indicator connected"></span>
                        <span>Flash Loan Contract: Connected</span>
                    </div>
                    <div class="contract-address" id="contractAddress">
                        Contract: 0x742d35Cc5e0d4A7B7f6F9a5B672F547B35f9B5A1
                    </div>
                    
                    <div class="api-status">
                        <span class="indicator connected"></span>
                        <span>Price Oracle: Connected</span>
                    </div>
                    
                    <div class="api-status">
                        <span class="indicator connected"></span>
                        <span>Transaction Relay: Connected</span>
                    </div>
                </div>
                
                <div class="card">
                    <h2 class="card-title"><i class="fas fa-exchange-alt"></i> Token Selection</h2>
                    <div class="form-group">
                        <label>Flash Loan Pattern</label>
                        <div class="pair-selector">
                            <select id="tokenA">
                                <option value="BNB">BNB</option>
                                <option value="ETH">ETH</option>
                                <option value="SOL">SOL</option>
                                <option value="USDT" selected>USDT</option>
                                <option value="USDC">USDC</option>
                                <option value="DAI">DAI</option>
                                <option value="BTC">BTC</option>
                                <option value="MATIC">MATIC</option>
                                <option value="AVAX">AVAX</option>
                                <option value="APT">APT</option>
                            </select>
                            <div class="pair-arrow">→</div>
                            <select id="tokenB">
                                <option value="BNB">BNB</option>
                                <option value="ETH">ETH</option>
                                <option value="SOL">SOL</option>
                                <option value="USDT">USDT</option>
                                <option value="USDC" selected>USDC</option>
                                <option value="DAI">DAI</option>
                                <option value="BTC">BTC</option>
                                <option value="MATIC">MATIC</option>
                                <option value="AVAX">AVAX</option>
                                <option value="APT">APT</option>
                            </select>
                            <div class="pair-arrow">→</div>
                            <select id="tokenC">
                                <option value="BNB" selected>BNB</option>
                                <option value="ETH">ETH</option>
                                <option value="SOL">SOL</option>
                                <option value="USDT">USDT</option>
                                <option value="USDC">USDC</option>
                                <option value="DAI">DAI</option>
                                <option value="BTC">BTC</option>
                                <option value="MATIC">MATIC</option>
                                <option value="AVAX">AVAX</option>
                                <option value="APT">APT</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Loan Amount</label>
                        <div class="amount-input">
                            <input type="number" id="loanAmount" placeholder="Enter amount" value="1000">
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <div class="card">
                    <h2 class="card-title"><i class="fas fa-cogs"></i> Configuration</h2>
                    
                    <div class="form-group">
                        <label>Select DEXs for Arbitrage (Select 2 or more)</label>
                        <div class="dex-selection">
                            <div class="dex-option" data-dex="uniswap">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>Uniswap</h3>
                                <p>Ethereum, Polygon</p>
                            </div>
                            <div class="dex-option" data-dex="pancakeswap">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>PancakeSwap</h3>
                                <p>BSC, Ethereum</p>
                            </div>
                            <div class="dex-option" data-dex="sushiswap">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>SushiSwap</h3>
                                <p>Multi-chain</p>
                            </div>
                            <div class="dex-option" data-dex="raydium">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>Raydium</h3>
                                <p>Solana</p>
                            </div>
                            <div class="dex-option" data-dex="traderjoe">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>Trader Joe</h3>
                                <p>Avalanche</p>
                            </div>
                            <div class="dex-option" data-dex="curve">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>Curve</h3>
                                <p>Multi-chain</p>
                            </div>
                            <div class="dex-option" data-dex="balancer">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>Balancer</h3>
                                <p>Ethereum, Polygon</p>
                            </div>
                            <div class="dex-option" data-dex="quickswap">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>QuickSwap</h3>
                                <p>Polygon</p>
                            </div>
                            <div class="dex-option" data-dex="spookyswap">
                                <i class="fas fa-exchange-alt"></i>
                                <h3>SpookySwap</h3>
                                <p>Fantom</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Slippage Tolerance</label>
                        <select id="slippage">
                            <option value="0.5">0.5%</option>
                            <option value="1" selected>1.0%</option>
                            <option value="1.5">1.5%</option>
                            <option value="2">2.0%</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Gas Price (Gwei)</label>
                        <input type="range" id="gasPrice" min="1" max="100" value="5">
                        <div class="gas-display" id="gasDisplay">5 Gwei</div>
                    </div>
                </div>
                
                <button class="btn btn-execute" id="executeLoan">
                    <i class="fas fa-bolt"></i> Execute Flash Loan
                </button>
                
                <div class="profit-display" id="profitDisplay">
                    <h3><i class="fas fa-coins"></i> Flash Loan Profit</h3>
                    <div class="profit-amount" id="profitAmount">$0.00</div>
                    <p>Your flash loan arbitrage was successful!</p>
                </div>
            </div>
        </div>
        
        <div class="transaction-log">
            <h4><i class="fas fa-list"></i> Transaction Log</h4>
            <div id="logEntries">
                <div class="log-entry">System initialized. Ready to connect to blockchain.</div>
            </div>
        </div>
        
        <div class="disclaimer">
            <p><strong>Disclaimer:</strong> Flash loans carry significant risks including smart contract vulnerabilities, market volatility, and potential loss of funds. This is a simulation interface for educational purposes. Always exercise caution when interacting with DeFi protocols and never risk more than you can afford to lose.</p>
        </div>
    </div>

    <!-- Wallet Connection Modal -->
    <div class="modal" id="walletModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Connect Wallet</h2>
                <button class="close-modal">&times;</button>
            </div>
            <p>Select your wallet to connect to the application:</p>
            
            <div class="wallet-options">
                <div class="wallet-option" data-wallet="metamask">
                    <i class="fab fa-ethereum"></i>
                    <h3>MetaMask</h3>
                    <p>EVM Chains</p>
                </div>
                <div class="wallet-option" data-wallet="trust">
                    <i class="fas fa-mobile-alt"></i>
                    <h3>Trust Wallet</h3>
                    <p>Multi-chain</p>
                </div>
                <div class="wallet-option" data-wallet="phantom">
                    <i class="fas fa-ghost"></i>
                    <h3>Phantom</h3>
                    <p>Solana, Ethereum</p>
                </div>
                <div class="wallet-option" data-wallet="walletconnect">
                    <i class="fas fa-qrcode"></i>
                    <h3>WalletConnect</h3>
                    <p>Multi-wallet</p>
                </div>
            </div>
            
            <div class="qr-code" id="qrCodeContainer">
                <p>Scan this QR code with your wallet</p>
                <img src="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=flashloanapp://connect" alt="QR Code">
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const connectWalletBtn = document.getElementById('connectWallet');
            const executeLoanBtn = document.getElementById('executeLoan');
            const walletModal = document.getElementById('walletModal');
            const closeModalBtn = document.querySelector('.close-modal');
            const walletOptions = document.querySelectorAll('.wallet-option');
            const dexOptions = document.querySelectorAll('.dex-option');
            const qrCodeContainer = document.getElementById('qrCodeContainer');
            const profitDisplay = document.getElementById('profitDisplay');
            const profitAmount = document.getElementById('profitAmount');
            const connectionStatus = document.getElementById('connectionStatus');
            const networkStatus = document.getElementById('networkStatus');
            const logEntries = document.getElementById('logEntries');
            const gasPriceSlider = document.getElementById('gasPrice');
            const gasDisplay = document.getElementById('gasDisplay');
            
            // Application State
            let selectedWallet = null;
            let selectedDEXs = [];
            let isConnected = false;
            let web3;
            
            // Connect to MetaMask
            async function connectMetaMask() {
                if (typeof window.ethereum !== 'undefined') {
                    try {
                        // Request account access
                        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                        const account = accounts[0];
                        
                        // Create Web3 instance
                        web3 = new Web3(window.ethereum);
                        
                        // Get network ID
                        const chainId = await web3.eth.getChainId();
                        
                        // Update UI
                        connectionStatus.textContent = 'Connected with MetaMask';
                        networkStatus.textContent = getNetworkName(chainId);
                        
                        // Add wallet address to UI
                        if (!document.querySelector('.wallet-address')) {
                            const walletAddress = document.createElement('div');
                            walletAddress.className = 'wallet-address';
                            walletAddress.textContent = `${account.substring(0, 6)}...${account.substring(account.length - 4)}`;
                            document.querySelector('.wallet-info').appendChild(walletAddress);
                        }
                        
                        addLogEntry('MetaMask connected successfully');
                        addLogEntry(`Network: ${getNetworkName(chainId)}`);
                        addLogEntry(`Address: ${account}`);
                        
                        return account;
                    } catch (error) {
                        console.error(error);
                        addLogEntry('Error connecting to MetaMask: ' + error.message);
                    }
                } else {
                    alert('Please install MetaMask!');
                    addLogEntry('MetaMask not detected');
                }
            }
            
            // Get network name from chain ID
            function getNetworkName(chainId) {
                switch (chainId) {
                    case 1: return 'Ethereum Mainnet';
                    case 56: return 'Binance Smart Chain';
                    case 137: return 'Polygon';
                    case 42161: return 'Arbitrum';
                    case 10: return 'Optimism';
                    case 43114: return 'Avalanche';
                    default: return `Unknown Network (${chainId})`;
                }
            }
            
            // Add log entry
            function addLogEntry(message) {
                const entry = document.createElement('div');
                entry.className = 'log-entry';
                entry.textContent = new Date().toLocaleTimeString() + ' - ' + message;
                logEntries.appendChild(entry);
                logEntries.scrollTop = logEntries.scrollHeight;
            }
            
            // Update gas display
            gasPriceSlider.addEventListener('input', function() {
                gasDisplay.textContent = this.value + ' Gwei';
                addLogEntry('Gas price set to ' + this.value + ' Gwei');
            });
            
            // Show wallet modal
            connectWalletBtn.addEventListener('click', function() {
                walletModal.style.display = 'flex';
                addLogEntry('Opening wallet connection modal');
            });
            
            // Close modal
            closeModalBtn.addEventListener('click', function() {
                walletModal.style.display = 'none';
                addLogEntry('Closed wallet connection modal');
            });
            
            // Click outside modal to close
            window.addEventListener('click', function(event) {
                if (event.target === walletModal) {
                    walletModal.style.display = 'none';
                    addLogEntry('Closed wallet connection modal');
                }
            });
            
            // Wallet selection
            walletOptions.forEach(option => {
                option.addEventListener('click', function() {
                    const wallet = this.dataset.wallet;
                    selectedWallet = wallet;
                    
                    addLogEntry('Selected wallet: ' + wallet);
                    
                    // Show QR code for WalletConnect
                    if (wallet === 'walletconnect') {
                        qrCodeContainer.style.display = 'block';
                        addLogEntry('Showing QR code for WalletConnect');
                    } else {
                        qrCodeContainer.style.display = 'none';
                        
                        // Connect to the selected wallet
                        if (wallet === 'metamask') {
                            connectMetaMask().then(() => {
                                walletModal.style.display = 'none';
                                connectWalletBtn.innerHTML = '<i class="fas fa-check"></i> Connected';
                                connectWalletBtn.classList.remove('btn-connect');
                                isConnected = true;
                            });
                        } else {
                            // For other wallets, we'll simulate connection
                            setTimeout(() => {
                                walletModal.style.display = 'none';
                                connectWalletBtn.innerHTML = '<i class="fas fa-check"></i> Connected';
                                connectWalletBtn.classList.remove('btn-connect');
                                
                                connectionStatus.textContent = 'Connected with ' + wallet;
                                networkStatus.textContent = 'Ethereum Mainnet';
                                
                                // Simulate receiving wallet address
                                if (!document.querySelector('.wallet-address')) {
                                    const walletAddress = document.createElement('div');
                                    walletAddress.className = 'wallet-address';
                                    walletAddress.textContent = '0x742d...35f9';
                                    document.querySelector('.wallet-info').appendChild(walletAddress);
                                }
                                
                                addLogEntry('Wallet connected successfully');
                                addLogEntry('Network: Ethereum Mainnet');
                                addLogEntry('Address: 0x742d...35f9');
                                
                                isConnected = true;
                            }, 1000);
                        }
                    }
                });
            });
            
            // DEX selection
            dexOptions.forEach(option => {
                option.addEventListener('click', function() {
                    const dex = this.dataset.dex;
                    
                    if (selectedDEXs.includes(dex)) {
                        // Deselect if already selected
                        this.classList.remove('selected');
                        selectedDEXs = selectedDEXs.filter(d => d !== dex);
                        addLogEntry('Deselected DEX: ' + dex);
                    } else {
                        // Select if less than 6 are selected
                        if (selectedDEXs.length < 6) {
                            this.classList.add('selected');
                            selectedDEXs.push(dex);
                            addLogEntry('Selected DEX: ' + dex);
                        } else {
                            alert('Please select maximum six DEXs for arbitrage');
                            addLogEntry('Attempted to select more than six DEXs');
                        }
                    }
                });
            });
            
            // Execute flash loan
            executeLoanBtn.addEventListener('click', function() {
                if (!isConnected) {
                    alert('Please connect your wallet first');
                    addLogEntry('Attempted to execute without wallet connection');
                    return;
                }
                
                if (selectedDEXs.length < 2) {
                    alert('Please select at least two DEXs for arbitrage');
                    addLogEntry('Attempted to execute without selecting two DEXs');
                    return;
                }
                
                const tokenA = document.getElementById('tokenA').value;
                const tokenB = document.getElementById('tokenB').value;
                const tokenC = document.getElementById('tokenC').value;
                const amount = document.getElementById('loanAmount').value;
                const network = document.getElementById('network').value;
                const slippage = document.getElementById('slippage').value;
                const gasPrice = document.getElementById('gasPrice').value;
                
                addLogEntry('Starting flash loan execution...');
                addLogEntry(`Pattern: ${tokenA} → ${tokenB} → ${tokenC}`);
                addLogEntry(`Amount: $${amount}`);
                addLogEntry(`Network: ${network}`);
                addLogEntry(`DEXs: ${selectedDEXs.join(', ')}`);
                addLogEntry(`Slippage: ${slippage}%`);
                addLogEntry(`Gas Price: ${gasPrice} Gwei`);
                
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                this.disabled = true;
                
                // Simulate API calls and blockchain interaction
                setTimeout(() => {
                    addLogEntry('Checking arbitrage opportunities across ' + selectedDEXs.length + ' DEXs...');
                    
                    setTimeout(() => {
                        addLogEntry('Arbitrage opportunity found: 1.8% profit potential');
                        addLogEntry('Approving token spending...');
                        
                        setTimeout(() => {
                            addLogEntry('Token approval confirmed');
                            addLogEntry('Executing flash loan...');
                            
                            setTimeout(() => {
                                addLogEntry('Flash loan received: $' + amount + ' ' + tokenA);
                                
                                // Simulate swaps across all selected DEXs
                                selectedDEXs.forEach((dex, index) => {
                                    setTimeout(() => {
                                        addLogEntry('Swapping on ' + dex + '...');
                                        
                                        if (index === selectedDEXs.length - 1) {
                                            setTimeout(() => {
                                                addLogEntry('Swap completed on ' + dex);
                                                addLogEntry('Repaying flash loan...');
                                                
                                                setTimeout(() => {
                                                    addLogEntry('Flash loan repaid with 0.09% fee');
                                                    
                                                    // Show profit display with random profit
                                                    const profit = (amount * (0.008 + Math.random() * 0.02)).toFixed(2);
                                                    profitAmount.textContent = '$' + profit;
                                                    profitDisplay.style.display = 'block';
                                                    
                                                    addLogEntry('Flash loan executed successfully');
                                                    addLogEntry(`Profit: $${profit}`);
                                                    
                                                    this.innerHTML = originalText;
                                                    this.disabled = false;
                                                    
                                                    alert(`Flash loan executed successfully!\n\nPattern: ${tokenA} → ${tokenB} → ${tokenC}\nAmount: $${amount}\nNetwork: ${network}\nDEXs: ${selectedDEXs.join(', ')}\nProfit: $${profit}`);
                                                }, 1000);
                                            }, 1500);
                                        }
                                    }, index * 800);
                                });
                            }, 1000);
                        }, 1000);
                    }, 1000);
                }, 1000);
            });
            
            // Update amount placeholder based on token
            const tokenSelects = document.querySelectorAll('select');
            tokenSelects.forEach(select => {
                select.addEventListener('change', function() {
                    const amountInput = document.getElementById('loanAmount');
                    if (this.value === 'USDT' || this.value === 'USDC' || this.value === 'DAI') {
                        amountInput.placeholder = 'Enter amount in dollars';
                    } else {
                        amountInput.placeholder = 'Enter amount in crypto';
                    }
                });
            });
            
            // Initialize log
            addLogEntry('Application initialized');
            addLogEntry('Select a wallet to begin');
        });
    </script>
</body>
</html>
